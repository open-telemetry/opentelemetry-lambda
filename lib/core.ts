// Generated by projen. To modify, edit .projenrc.js and run "npx projen".

import { AwsProvider } from '../.gen/providers/aws';
import { S3Backend, TerraformStack } from "cdktf";
import { Construct } from "constructs";

export enum Environment {
  Production = 'prod',
  UAT = 'uat',
  Test = 'test',
  Development = 'dev',
  DataProduction = 'data-prod',
  DataUAT = 'data-uat',
  DataDevelopment = 'data-dev',
  PlatformTooling = 'platform-tooling',
  Sandbox = 'sandbox',
}

export enum Region {
  US_EAST_1 = 'us-east-1',
}

export enum Namespace {
  Medly = 'medly',
  MedlyData = 'medly-data',
}

export enum DbInstanceClass {
  Small = "db.t2.micro",
  Medium = "db.t2.medium",
  Large = "db.t2.large"
}

export interface CommonConfig {
  readonly namespace: Namespace;
  readonly region: Region;
  readonly serviceName: string;
  readonly tags?: Map<string, string>;
  readonly tfStateRegion?: Region;
}

export interface BaseStackConfig extends CommonConfig {
  readonly environment: Environment;
}

export class BaseStack extends TerraformStack {

  public static tags(config: BaseStackConfig) {
    const defaultTags = new Map<string, string>([
      ['env', config.environment],
      ['resource-for', config.serviceName],
      ['service', config.serviceName],
      ['owner', config.serviceName],
      ['provisioner', 'cdktf'],
    ]);

    return new Map([...defaultTags, ...(config.tags ?? [])]);
  }

  constructor(scope: Construct, id: string, config: BaseStackConfig) {
    super(scope, id);

    const { tfStateRegion = Region.US_EAST_1 } = config

    new AwsProvider(this, "aws", {
      region: config.region
    });

    new S3Backend(this, {
      bucket: `${config.namespace}-${config.environment}-terraform-state`,
      key: `global/${config.serviceName}/terraform.tfstate`,
      region: tfStateRegion,
      dynamodbTable: `${config.namespace}-${config.environment}-state-locks`,
      encrypt: true
    });
  }
}
