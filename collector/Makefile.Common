GOTEST_OPT?= -race -timeout 120s
GOCMD?= go
GOTEST=$(GOCMD) test
GO_ACC=go-acc
LINT=golangci-lint
IMPI=impi

GOOS := $(shell $(GOCMD) env GOOS)
GOARCH := $(shell $(GOCMD) env GOARCH)
GH := $(shell which gh)

.PHONY: test
test:
	$(GOTEST) $(GOTEST_OPT) ./...

.PHONY: test-with-cover
test-with-cover:
	$(GO_ACC) --output=coverage.out ./...

.PHONY: benchmark
benchmark:
	$(GOTEST) -bench=. -benchtime=5s -count 5 -benchmem -cpuprofile=cpu.out -memprofile=mem.out -run=notests ./

.PHONY: fmt
fmt:
	gofmt -w -s ./
	goimports -w  -local github.com/open-telemetry/opentelemetry-lambda/collector ./

.PHONY: tidy
tidy:
	rm -fr go.sum
	$(GOCMD) mod tidy -compat=1.21

.PHONY: lint
lint:
	$(LINT) run

.PHONY: generate
generate:
	$(GOCMD) generate ./...

.PHONY: impi
impi:
	@$(IMPI) --local github.com/open-telemetry/opentelemetry-lambda/collector --scheme stdThirdPartyLocal ./...

.PHONY: moddownload
moddownload:
	$(GOCMD) mod download

.PHONY: align
align:
	-fieldalignment -fix .
